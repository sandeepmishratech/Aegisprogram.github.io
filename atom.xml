<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rem Blue</title>
  
  <subtitle>繁华三千异世界,只取一瓢真爱蓝。</subtitle>
  <link href="https://example.github.io/atom.xml" rel="self"/>
  
  <link href="https://example.github.io/"/>
  <updated>2021-07-06T07:20:29.831Z</updated>
  <id>https://example.github.io/</id>
  
  <author>
    <name>Aegisprogram</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搜索引擎列表</title>
    <link href="https://example.github.io/posts/3038875764.html"/>
    <id>https://example.github.io/posts/3038875764.html</id>
    <published>2021-07-05T14:27:04.000Z</published>
    <updated>2021-07-06T07:20:29.831Z</updated>
    
    <content type="html"><![CDATA[<p>搜索引擎已经成为我们上网活动中必不可少的一部分，像大家熟知的国外的Google，中国的百度，这些都已经成为人们从网上获取信息的重要工具。很多人苦于百度的广告，但是又对国内无法使用Google搜索而感到无奈（科学上网有一定的门槛，所以只有少部分人才会的）。搜索引擎发展至今，到现在搜索引擎市场也诞生了不少的“优秀分子”，下面我将对这些搜索引擎进行盘点。</p><p>提示：下面的搜索引擎盘点中并不会包含百度等其他的一些国内的乱七八糟的搜索引擎，国内百度并不是说不能用，只是觉得我要的信息是要在广告里面找出来的，这很耽误时间。其他的像360搜索之类的搜索服务做的还不如百度，也就没有列举的必要了。</p><span id="more"></span><h2 id="Magi"><a href="#Magi" class="headerlink" title="Magi"></a><a href="https://magi.com/">Magi</a></h2><p>Magi 是由 Peak Labs研发的基于机器学习的信息抽取和检索系统，它能将任何领域的自然语言文本中的知识提取成结构化的数据，通过终身学习持续聚合和纠错，进而为人类用户和其他人工智能提供<strong>可解析</strong>、<strong>可检索</strong>、<strong>可溯源</strong>的知识体系。</p><p>总而言之一句话，基于机器学习的搜索引擎。提供结果的同时还会列举出自己的学习来源。在国内来说值得一试。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/magi.242eccywj7wg.png" alt="image"></p><h2 id="bing"><a href="#bing" class="headerlink" title="bing"></a>bing</h2><p>国内版/大陆国际版：<a href="https://cn.bing.com/">https://cn.bing.com</a></p><p>原生bing：<a href="https://www,bing.com/">https://www,bing.com</a></p><p>相信你已经看出来了，是的，bing虽说有三个版本，但是上面两个版本是大陆的定制版，搜索页面下方是有公安备案。的，海外原生bing是没有备案的，这是两者外观上很显著的差别。当大陆地区使用bing的时候，就会被强制重定向到cn.bing.com——也就是国内定制版bing。但是，虽说是大陆定制版，搜索的效率和结果比百度逊色不了多少，而且结果中广告更少。在国内不失为一个好用的搜索引擎。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/bing.72texs8qw440.png" alt="image"></p><p>注意：下面的搜索引擎大多数国内都无法访问，如果点击链接没有打开页面，那就证明已经被GFW拦截了。</p><h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a><a href="https://www.google.com/">Google</a></h2><p>海外使用人数最大的搜索引擎，搜索引擎界的老大哥。搜索效率高，广告少，准确率高。但是国内大陆地区无法访问和使用。但是会追踪用户，分析用户行为，收集用户信息用于投放广告。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/google.247io1p259ds.png" alt="image"></p><h2 id="DuckDuckgo"><a href="#DuckDuckgo" class="headerlink" title="DuckDuckgo"></a><a href="https://duckduckgo.com/">DuckDuckgo</a></h2><p>注重用户隐私，及避免<a href="https://zh.wikipedia.org/wiki/%E4%B8%AA%E6%80%A7%E5%8C%96%E6%A3%80%E7%B4%A2">个性化检索</a>所致的<a href="https://zh.wikipedia.org/wiki/%E9%81%8E%E6%BF%BE%E6%B0%A3%E6%B3%A1">过滤气泡</a>，它与其他搜索引擎不同的地方在于其不会分析自己的用户、对所有使用同一组关键词的用户显示同样的结果。它也强调返回最佳结果，而不是最多网站链接的结果。之前国内的多吉搜索也是这般倡导不打扰，不追踪，但是在今年两会期间就凉了，类似的还有秘迹搜索。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/duckduckgo.3n8bhbvjyjk0.png" alt="image"></p><h2 id="Startpage"><a href="#Startpage" class="headerlink" title="Startpage"></a><a href="https://www.startpage.com/">Startpage</a></h2><p>Startpage为一荷兰公司Startpage B.V.所推出的搜寻引擎服务,Startpage后台使用Google搜索API，所以具有跟Google本身相同的搜索质量。但是它发给Google服务器的只有搜索关键字，Google不会获取到除此以外的<a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5">头字段</a>和<a href="https://zh.wikipedia.org/wiki/Cookie">cookie</a>等信息。因此，startpage在用户隐私保护方面同样出色。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/startpage.43l4t8mgf140.png" alt="image"></p><h2 id="Qwant"><a href="#Qwant" class="headerlink" title="Qwant"></a><a href="https://www.qwant.com/">Qwant</a></h2><p>Qwant是由法国打造专业搜索引擎的法国企业Pertimm和信息安全专家ÉricLeandri合作创建的一个搜索引擎，以15种语言面向35个国家开放。Qwant执行非常严格的隐私条例，保证绝不获取使用者的任何信息，也不会在用户浏览网站时，搭载任何可能泄露使用者身份及位置的Cookies（小型文本）文件。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/qwant.1wkib4tta1ds.png" alt="image"></p><h2 id="Ecosia"><a href="#Ecosia" class="headerlink" title="Ecosia"></a><a href="https://www.ecosia.org/">Ecosia</a></h2><p>Ecosia是一个总部位于德国柏林的搜索引擎，他们将至少80%的利润捐赠给非营利利组织，用于种植树木。Ecosia致力于保护用户隐私。搜索会被加密，不会永久存储，Ecosia也不会将数据出售给第三方广告商。Ecosia在隐私政策中声明，它不创建基于搜索历史记录的个人配置文件，也不使用任何诸如<a href="https://zh.wikipedia.org/wiki/Google%E5%88%86%E6%9E%90">Google分析</a>的外部跟踪工具。截止2020年7月，Ecosia种植的树木总数已超过1亿株，每月从大气中吸收超过5万吨的二氧化碳。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/ecosia.14vmmg743oh.png" alt="image"></p><h2 id="Metager"><a href="#Metager" class="headerlink" title="Metager"></a><a href="https://metager.org/">Metager</a></h2><p>MetaGer是基于德国的基于隐私的搜索引擎。与“startpage”一样，MetaGer也使用代理服务器技术在访问网站时隐藏用户的位置。在MetaGer上搜索字词时，用户会在每个结果下方看到一个名为“匿名打开”的附加选项。”单击后，MetaGer将设置代理服务器并通过它定向到你想要的网站。因为MetaGer是查询的来源，所以用户的访问仍然是匿名的,同时MetaGer是以捐赠为支持的非营利组织。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/metager.2q8xw6no3a80.png" alt="image"></p><h2 id="peeker"><a href="#peeker" class="headerlink" title="peeker"></a><a href="https://peekier.com/">peeker</a></h2><p> Peeker 是一种搜索网页的新方法。 在尊重你隐私的搜索引擎上快速安全地查看搜索结果。与一般搜索引擎不同的是，peeker采用宫格图方式展现搜索结果，这样的方式有利于用户预览网页内容。同时也是具有严格的隐私政策。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/peeker.646yj12q8ao0.png" alt="image"></p><h2 id="Searx"><a href="#Searx" class="headerlink" title="Searx"></a>Searx</h2><p>Searx，一个基于<code>Python</code>的完全开源免费搜索引擎平台，为你提供来自Google、Bing、Yahoo等<code>70</code>多种各大视频、图片、搜索、磁力等网站结果展示，并对搜索结果进行优化，同时不会存储你的任何搜索信息。支持用户自行<a href="https://searx.github.io/searx/">安装搭建</a>。如果自己暂时没有这个想法或者能力地话，那么这里有一份searx的<a href="https://searx.space/">公开站台</a>可以使用。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/Searx.2k6cnfg74du0.png" alt="image"></p><h2 id="Yacy"><a href="#Yacy" class="headerlink" title="Yacy"></a><a href="https://yacy.net/">Yacy</a></h2><p>YaCy是一个基于<a href="https://zh.wikipedia.org/zh/%E5%B0%8D%E7%AD%89%E7%B6%B2%E8%B7%AF">p2p</a>的分布式开源免费的网页搜索引擎系统，任何人都可以用YaCy为自己建立个人的搜索门户，以实现信息的自由共享。YaCy采用多种机制保护用户的隐私，YaCy网络基于<a href="https://zh.wikipedia.org/wiki/%E7%82%B9%E5%AF%B9%E7%82%B9">点对点</a>连接，而不是通过中央服务器进行搜索查询，保证内容不被审查，而且所有的搜索请求都被加密，搜索结果不会被中央服务器记录和分析。由于该搜索引擎是基于Java语言进行开发的，所以安装Yacy程序之前必须保证自己的电脑已经安装了Java。总的来说，这个搜索引擎对于新手极为不友好，上手难度高，门槛高，但是搜索能力和隐私保护能力却是一流的。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/yacy.cam0rp26uls.png" alt="image"></p><h2 id="Yandex"><a href="#Yandex" class="headerlink" title="Yandex"></a><a href="https://yandex.com/">Yandex</a></h2><p>Yandex搜索引擎是俄罗斯Yandex公司开发的一款搜索引擎，Yandex是目前世界第五大搜索引擎，在俄国内拥有逾60%的市场占有率，也是欧洲市场上较为流行的搜索引擎。由于搜索引擎结果经常会混杂大量的俄语，所以对于中文用户来说体验并不算太好。但是，国内似乎可以正常地访问。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/Yandex.6qn1wyl5n0c0.png" alt="image"></p><h2 id="OneSearch"><a href="#OneSearch" class="headerlink" title="OneSearch"></a><a href="https://www.onesearch.com/">OneSearch</a></h2><p>OneSearch实际上并不是一款全新的搜索引擎，相反，它是一个基于微软Bing定制的搜索引擎。 这款引擎的主要亮点是它不会对用户进行追踪、储存他们的数据或跟广告商分享用户个人或搜索数据。换言之，用户的个人信息基本不会被出售第三方。但是OneSearch也依赖广告盈利。不过它不是根据cookie或用户浏览历史而是通过搜索关键字等因素显示情景广告。如果使用了高级隐私模式的用户，该搜索引擎的结果链接将会在一小时后失效。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/onesearch.2uuk33zgnu00.png" alt="image"></p><h2 id="BraveSearch"><a href="#BraveSearch" class="headerlink" title="BraveSearch"></a><a href="https://search.brave.com/">BraveSearch</a></h2><p>这是brave公司刚推出不久的搜索引擎，目前还是beta阶段，对于中文的部分检索词不是很准确。但是界面美观，没有明显的广告，不分析用户行为，也不追踪用户，也是一款注重用户隐私的搜索引擎。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/brave.2d9fmzrypglc.png" alt="image"></p><p>从效率上来说：在海量信息时代，一个优秀的搜索引擎总是能让我们事半功倍。</p><p>从安全隐私上来说：在互联网公司虎视眈眈下，一个注重用户隐私的搜索引擎能在我们保护个人隐私时助我们一臂之力。</p><p>我没法说哪一个搜索引擎是最优秀的，因为它们各有千秋，我们各取所需。</p><p>参考：相关词条参考于维基百科同名词条以及各自的官方说明文档/博客。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;搜索引擎已经成为我们上网活动中必不可少的一部分，像大家熟知的国外的Google，中国的百度，这些都已经成为人们从网上获取信息的重要工具。很多人苦于百度的广告，但是又对国内无法使用Google搜索而感到无奈（科学上网有一定的门槛，所以只有少部分人才会的）。搜索引擎发展至今，到现在搜索引擎市场也诞生了不少的“优秀分子”，下面我将对这些搜索引擎进行盘点。&lt;/p&gt;
&lt;p&gt;提示：下面的搜索引擎盘点中并不会包含百度等其他的一些国内的乱七八糟的搜索引擎，国内百度并不是说不能用，只是觉得我要的信息是要在广告里面找出来的，这很耽误时间。其他的像360搜索之类的搜索服务做的还不如百度，也就没有列举的必要了。&lt;/p&gt;</summary>
    
    
    
    <category term="分享" scheme="https://example.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="分享" scheme="https://example.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="搜索引擎" scheme="https://example.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>WSL2、Windows Terminal 完整配置</title>
    <link href="https://example.github.io/posts/f5bc5ed5.html"/>
    <id>https://example.github.io/posts/f5bc5ed5.html</id>
    <published>2021-07-03T05:25:33.000Z</published>
    <updated>2021-07-06T07:02:24.126Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间微软总算把Linux系统“搬到”Windows上来了。WSL2与之前的版本相比，提高了文件系统性能并增加系统调用的完全兼容性。所以，给人的感觉就是WSL2更加的成熟一些。但是你在使用WSL2服务的时候，你还是无法使用虚拟机的。下面我将介绍如何将WSL2与Windows Terminal结合使用。</p><p>注意： WSL 2 仅适用于 Windows 10 版本18917或更高版本，如果你不清楚自己的版本号，那么你可以通过打开设置-系统-关于中的设备参数中查看，或者使用命令<code>systeminfo | find &quot;System Type&quot;</code>输出自己PC的版本号。</p><span id="more"></span><h2 id="开启WSL下载内核"><a href="#开启WSL下载内核" class="headerlink" title="开启WSL下载内核"></a>开启WSL下载内核</h2><p>我们输入以下命令开启设备上的WSL</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p>开启成功之后，我们需要重新启动计算机。</p><p>接下来，我们去下载最新的Linux内核软件包</p><p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">x64下载地址</a></p><p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi">AMD64下载地址</a></p><p>切记要下载对应的指令集的更新包，关于二者的差别这里不展开讲，有兴趣的可以看看<a href="https://zh.wikipedia.org/zh-cn/X86-64">这个</a></p><p>下载完成之后，双击运行该文件。</p><h2 id="安装Linux"><a href="#安装Linux" class="headerlink" title="安装Linux"></a>安装Linux</h2><p>完成上面的步骤之后，我们现在去Microsoft store安装Linux发行版本，我这里选择的是Ubuntu18.04，个人可以随意选择，自己用着顺手就行。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/linux%E5%8F%91%E8%A1%8C%E7%89%88.1lks55li1tj4.png" alt="image"></p><p>下载完成之后，我们点击启动，创建用户和密码。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>我们输入wsl -l -v 查看当前的版本，如果你的WSL处于1的话，我建议切换至2。因为我个人在安装Linux发行版的时候，当我点击启动Ubuntu打算创建用户和密码的时候，上面显示“当前的网络名已经不再可用”。如果你在过程中也遇到了这样的问题，那么请这样操作。</p><p><code>wsl --set-version Ubuntu-18.04 2</code></p><p>你也可以使用命令默认使用WSL2</p><p><code>wsl --set-default-version 2</code></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动Ubuntu的方式有两种，一是通过点击Ubuntu的图标使其运行，另一种就是使用wsl命令运行。因为接下来要与WindowsTerminal结合使用，所以我将会用wsl命令来启用Ubuntu。</p><hr><h2 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h2><p>注意：以下是关于Windows Terminal的相关的一些配置，可以选择跳过，不影响WSL2和Linux发行版的使用，但是如果希望把Windows Terminal作为一个命令行工具，那么下面的配置你可以考虑一下。</p><p><a href="https://github.com/microsoft/terminal">Windows Terminal</a>是一款集成了Windows上的<em>PowerShell、CMD以及Windows Linux</em>子系统的终端。<em>Windows</em>自身的命令控制台过于简陋，所以我们不妨使用<em>Windows Terminal</em>来替代<em>cmd和power shell</em>，只需要简单的配置一些功能，就能实现很多常用的<em>Linux</em>操作命令。</p><h4 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h4><p>Vim是一款优秀的Linux文本编辑器。我们在Windows下编辑一些一些配置文件的时候很有作用。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.首先，我建议先去下载一个Vim,安装的时候注意路径中不要包含中文路径。</span><br><span class="line">2.然后，配置环境变量。找到Vim.exe的二进制文件位置，例如我的Vim安装位置</span><br><span class="line">在C:\Program Files (x86)\Vim\vim82,</span><br><span class="line">然后到设置——系统——关于——高级系统设置——环境变量——path——编辑——新建。</span><br><span class="line">然后将Vim.exe的路径复制粘贴上去。（例如我的就是C:\Program Files (x86)\Vim\vim82）。</span><br><span class="line">然后重新打开Windows Terminal终端就可以了。</span><br></pre></td></tr></table></figure><h4 id="Git-Bash-配置"><a href="#Git-Bash-配置" class="headerlink" title="Git Bash 配置"></a>Git Bash 配置</h4><p><em>GitBash</em>是一个用于MicrosoftWindows环境的应用程序，被集成在git下面。更多资料——<a href="https://zh.wikipedia.org/zh-cn/Git">https://zh.wikipedia.org/zh-cn/Git</a></p><p>其实，我自己在网上看到很多的将Git Bash配置到Windows Terminal下都是通过修改Windows Terminal中的JSON文件来实现的。但是实际中，Windows Terminal已经精简了很多的冗长的代码，添加配置文件也变得更加的简单。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.首先，你需要去下载一个Git </span><br><span class="line">2.打开Windows Terminal终端，进入设置——添加配置文件。</span><br><span class="line">填写名称，选择文件路径（找到自己git bash.exe的二进制文件路径）</span><br><span class="line">例如我的git 的bash.exe在D:\BigDataTools\Git\Git\bin下。</span><br><span class="line">你可以添加一个图标（当然也可以不要）。之后重启终端就可以了。</span><br></pre></td></tr></table></figure><p>但是，完成相关的bash配置之后我们会发现，当我们使用命令浏览磁盘下具有中文的文件夹时会出现乱码现象。其实，这个很好解决，我们只需要在Git文件路径下找到bash.bashrc文件，例如我的路径D:\BigDataTools\Git\Git\etc。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/bash.bashrc.g42ff1ndx94.png" alt="image"></p><p>然后打开文件进行编辑，在文件后面添加</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export LANG=&quot;zh<span class="emphasis">_CN.UTF-8&quot;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">export LC_</span>ALL=&quot;zh<span class="emphasis">_CN.UTF-8&quot;</span></span><br></pre></td></tr></table></figure><p>之后，保存退出，重启终端，这个时候我们就会发现问题解决了。</p><p><font color='00dd00'>关于Windows Terminal的配置部分算是额外添加补充的，但是没有这些配置也不影响我使用WSL2以及Linux发行版。</font></p><p>完成这些配置之后，接下来我们就可以使用命令在Windows Terminal中来启动Ubuntu了实现操作文件的效果了。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl 启用Ubuntu</span><br><span class="line">exit 退出Ubuntu</span><br></pre></td></tr></table></figure><h2 id="WSL1和WSL2"><a href="#WSL1和WSL2" class="headerlink" title="WSL1和WSL2"></a>WSL1和WSL2</h2><p>WSL1和WSL2到底有哪些不一样呢？</p><p>WSL1的主要问题是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件 I/O 慢，尤其是在大量IO操作时，例如使用 git 克隆仓库；</span><br><span class="line">不支持内核程序；</span><br></pre></td></tr></table></figure><p>WSL2改进方面</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">相比较于 WSL 1 使用翻译层将 linux 系统调用转化成 windows 系统调用，</span><br><span class="line">WSL 2 使用了一个轻量级的、无需维护的虚拟机，并在这个虚拟机中运行了一个完整的 linux 内核。</span><br><span class="line">WSL 2 使用一个 VHD 虚拟磁盘文件作为 linux 发行版的根目录，</span><br><span class="line">其中使用 ext4文件系统格式，极大提升了IO性能。</span><br><span class="line">WSL 1 不支持，WSL2 支持可以运行例如 Docker 等程序</span><br></pre></td></tr></table></figure><p>还有许多的地方二者都有不一样的地方，以及什么情况下选择哪一种版本更加合适，内容太多我没有办法一一列举，我强烈建议阅读微软<a href="https://docs.microsoft.com/en-us/windows/wsl/compare-versions">官方文档</a>,上面对于二者的描述很详细，很清楚。</p><h2 id="VM虚拟机还是WSL2"><a href="#VM虚拟机还是WSL2" class="headerlink" title="VM虚拟机还是WSL2"></a>VM虚拟机还是WSL2</h2><p>就安装配置来说，WSL2的安装可比新建虚拟机导入ISO镜像文件来的快多了。而且WSL2启动快，资源占用也少一些，共享文件和网络系统，节省了不少的折腾时间。所以是不是意味着我们可以和VM虚拟机说byebye了？</p><p>这可不见得，对于是使用WSL2还是VM虚拟机，还得看自己的需求。</p><p>1.如果你是一个萌新,那么建议使用虚拟机，对于命令不熟悉的你，最好不要直接在Windows上直接操作，万一出现什么问题解决起来可能要比你新建虚拟机长不少时间。在VM虚拟机就无所谓了，快照谁用谁真香，万一有什么错误还可以通过快照恢复。而且VM虚拟机有着更加友好的GUI界面，这对于新手来说也是很重要的一点，但是WSL2就显得比较简陋了。</p><p>2.VM虚拟机中的系统是一个较为完整的系统，能够很大程度上模拟真实的环境。而WSL2就只有一个轻量级的Linux内核而已，所以二者在功能性上丰富程度是相差较大，在这一点上VM虚拟机完胜WSL2。所以，如果你想体验一个较为完整的Linux系统，建议VM虚拟机。</p><p>目前，微软正在与VM进行合作，现在的VMWorkstation16允许Hyper-V与VM虚拟机同时使用了。相信以后估计不用再为两者的二选一问题而伤脑筋了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1.<a href="https://blog.csdn.net/jun8148/article/details/97245249">解决idea Terminal配置git bash中文乱码</a></p><p>2.<a href="https://docs.microsoft.com/en-us/windows/wsl/">Windows Subsystem for Linux Documentation</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前段时间微软总算把Linux系统“搬到”Windows上来了。WSL2与之前的版本相比，提高了文件系统性能并增加系统调用的完全兼容性。所以，给人的感觉就是WSL2更加的成熟一些。但是你在使用WSL2服务的时候，你还是无法使用虚拟机的。下面我将介绍如何将WSL2与Windows Terminal结合使用。&lt;/p&gt;
&lt;p&gt;注意： WSL 2 仅适用于 Windows 10 版本18917或更高版本，如果你不清楚自己的版本号，那么你可以通过打开设置-系统-关于中的设备参数中查看，或者使用命令&lt;code&gt;systeminfo | find &amp;quot;System Type&amp;quot;&lt;/code&gt;输出自己PC的版本号。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://example.github.io/categories/Linux/"/>
    
    
    <category term="教程" scheme="https://example.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="WSL2" scheme="https://example.github.io/tags/WSL2/"/>
    
    <category term="Windows Terminal" scheme="https://example.github.io/tags/Windows-Terminal/"/>
    
  </entry>
  
  <entry>
    <title>如何挑选博客框架、在线博客平台</title>
    <link href="https://example.github.io/posts/d9786a43.html"/>
    <id>https://example.github.io/posts/d9786a43.html</id>
    <published>2021-07-01T14:48:46.000Z</published>
    <updated>2021-07-06T07:03:22.261Z</updated>
    
    <content type="html"><![CDATA[<p>在现在这个信息发达的时代，越来越多非程序员出身的人也想要一个自己的博客。目前也诞生了不少的在线博客网站和博客框架，博客大致分为主要分为动态博客和静态博客两大类。其实关于动态博客和静态博客的选择问题，这个问题的看法还是见仁见智。我在这里简单说说两种博客之间的优劣，以及一些比较友好的在线博客网站。</p><span id="more"></span><h2 id="动态博客"><a href="#动态博客" class="headerlink" title="动态博客"></a>动态博客</h2><p>动态博客，一个运行在服务器上的博客程序，一般提供一个在线的编辑器供使用者在线编写，多数都需要使用PHP+数据库。</p><h4 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h4><p><a href="https://wordpress.org/">Wordpress</a>:十分有名的动态博客框架，几乎有涵盖所有功能的插件，搭建自己的动态博客的首选，全球已经有40%的网站使用wordpress驱动。</p><p><a href="http://typecho.org/">Typecho</a>:这是在功能性可以和Wordpress相媲美的博客框架，但是他的程序本体要比后者更加简洁。</p><p><a href="https://www.wix.com/">Wix</a>这是一款以色列的一站式网站创建服务博客框架，不需要了解DNS对应、网页编程语言、服务器创建/租赁等事务，一切都由 Wix 自动化处理，让用户能专心在网页视觉与内容呈现上，更可以调整手机版的设计及版面。</p><p><a href="https://halo.run/">Halo</a>:是一款基于Java语言，使用Spring Boot开发的博客系统，致力于打造最好的 Java 博客系统，比较容易上手。</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><blockquote><p>1.在线编写比较友好，不需要掌握过多的代码知识。<br>2.插件数量多，元素丰富。<br>3.响应式网页，交互性比较良好。<br>4.不显示后端处理过程，有利于保护自己的源代码</p></blockquote><h4 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h4><blockquote><p>1.由于使用了数据库和PHP等提高了性能，所以消耗的资源比较多。<br>2.后端部署较为繁琐，需要日常维护<br>3.可免费托管的平台较少<br>4.相较于静态博客，动态博客更加容易受到攻击和崩溃。</p></blockquote><hr><h2 id="静态博客"><a href="#静态博客" class="headerlink" title="静态博客"></a>静态博客</h2><p>所谓静态博客，即通过生成工具（eg： Hexo ； Hugo 等），直接将作者所书写的博文编译成最终的 html；css；js 等静态文件。作者/博主，只需将生成的文件部署在静态 server 上面即可被在互联网中访问。 用户通过浏览器访问服务器，直接就回获得已编译的静态资源。比如你现在看到的博客就是基于Hexo博客框架部署的静态博客。</p><h4 id="推荐-1"><a href="#推荐-1" class="headerlink" title="推荐"></a>推荐</h4><p><a href="https://gridea.dev/">Gridea</a>:Gridea 是一个静态博客写作客户端，帮助你更容易地构建并管理博客或任何静态站点。不过作者对于该项目的维护不那么积极，估计是要放弃了。</p><p><a href="https://jekyllrb.com/">Jekyll</a>:Jekyll 是一个简单的博客形态的静态站点生产机器，是GitHub官方推荐部署到GitHub Pages的博客框架，可谓是亲儿子。</p><p><a href="https://hexo.io/zh-cn/">Hexo</a>:Hexo 是一个基于Node.js的快速、简洁且高效的静态博客框架。Hexo 支持Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p><a href="https://www.gohugo.org/">Hugo</a>:Hugo是一种用Go语言编写的快速，现代的静态网站生成器，简单、易用、高效、易扩展、快速部署。</p><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><blockquote><p>1.没有过多的元素，专注于内容写作。<br>2.主题大多都比较简约。<br>3.无其他干扰（主要体现在广告比较少）<br>4.占用的资源较少，访问速度快，可免费部署的网站多。<br>5.可高度定制化，可以自写逻辑，插件等。</p></blockquote><h4 id="不足-1"><a href="#不足-1" class="headerlink" title="不足"></a>不足</h4><blockquote><p>1.需要一定的编程经验才能自定义样式。<br>2.插件数量较少。<br>3.缺少评论插件，交互式内容比较难以实现。<br>4.数学公式的支持不是很好，技术资料极少而多为英语资料，门槛较高。</p></blockquote><hr><h2 id="在线平台"><a href="#在线平台" class="headerlink" title="在线平台"></a>在线平台</h2><p>除了上面利用博客框架搭建自己的博客之外，我们也可以寻找一个适合自己的在线平台来写作博客。</p><h4 id="Blogger"><a href="#Blogger" class="headerlink" title="Blogger"></a><a href="https://www.blogger.com/about/?bpli=1">Blogger</a></h4><p>Blogger提供免费主机Blogspot.com存放博客，用户不必写任何代码或者安装服务器软件或脚本，透过所见即所得界面轻松地创建、发布、维护和修改自己的网志。允许用户自定义自己的域名（但是后面需接.blogspot.com）。具有较为成熟的中文博客书写和发布功能，使用起来较为简单轻松，内置许多的主题模板，自定义程度较高。</p><h4 id="不足-2"><a href="#不足-2" class="headerlink" title="不足"></a>不足</h4><p>.blogspot.com域名被GFW所屏蔽，内陆地区用户访问较为困难，需要使用科学上网手段。</p><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a><a href="https://github.com/">GitHub</a></h4><p>GitHub是当今世界上最流行，最大的代码托管网站和开源社区。如果你不想用GitHub Pages网页托管博客，那么你可以选择使用GitHub issues直接在GitHub上写自己的博客。只需要简单新建一个仓库，勾选添加issues，可以愉快的在GitHub issues上利用Markdown语法进行书写。不需要你掌握任何的代码能力，只需要简单掌握Markdown语法即可，支持本地内容预览，可以通过给issues加上不同的标签来进行分类。</p><h4 id="不足-3"><a href="#不足-3" class="headerlink" title="不足"></a>不足</h4><p>GFM（GitHub Flavored Markdown）语法对于在GitHub issues中编写中文的时候易出现标红，影响写作体验。对于HTML标签元素支持不够多。</p><h4 id="Notion"><a href="#Notion" class="headerlink" title="Notion"></a><a href="https://www.notion.so/">Notion</a></h4><p>Notion是一款提供笔记、任务、数据库、看板、维基、日历和提醒等组件的应用程序。用户可以将这些组件连接起来，来创建自己的系统，用于知识管理、笔记记录、数据管理、项目管理等，可以进行跨平台使用。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/notion.5xa5276cpmo0.png" alt="image"></p><h4 id="不足-4"><a href="#不足-4" class="headerlink" title="不足"></a>不足</h4><p>要想把Notion作为公开页面，需要一定的配置操作，Notion官方目前还没有提供自定义域名的服务（承诺日后提供），但是我们可以通过自己来进行实现公开页面的功能，以此来达到实现个人网站页面的效果。相关配置——<a href="https://sspai.com/post/58441">如何为Notion公开页面自定义域名</a></p><p>像Notion这类在线笔记服务其实有很多种，我很难一一列举，每个人的喜好也不完全相同，只要能实现个人网站效果就可以。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>1.文中的博客框架我也没有办法亲自一一搭建体验，所以这只是一个参考方向，更何况每个人对于博客什么要求，自己什么需求，只有自己最清楚。</p><p>2.动态博客和静态博客各自的优缺点都很明显，按需，按能力选择就好。</p><p>3.无论你是使用自建博客，还是在线网站，亦或者是笔记服务，重要的是你有坚持写博客的毅力。平台重要，但不是最重要的因素。</p><hr><p>参考文章:</p><p>1.<a href="https://blog.csdn.net/weixin_42365530/article/details/107840934">七大开源blog框架介绍</a></p><p>2.<a href="https://zhuanlan.zhihu.com/p/164959395">静态博客是什么？常用的静态博客程序有哪些？静态博客的优缺点！</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在现在这个信息发达的时代，越来越多非程序员出身的人也想要一个自己的博客。目前也诞生了不少的在线博客网站和博客框架，博客大致分为主要分为动态博客和静态博客两大类。其实关于动态博客和静态博客的选择问题，这个问题的看法还是见仁见智。我在这里简单说说两种博客之间的优劣，以及一些比较友好的在线博客网站。&lt;/p&gt;</summary>
    
    
    
    <category term="分享" scheme="https://example.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="文字博客" scheme="https://example.github.io/tags/%E6%96%87%E5%AD%97%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="分享" scheme="https://example.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="博客" scheme="https://example.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客相关配置(3)</title>
    <link href="https://example.github.io/posts/fe973f8e.html"/>
    <id>https://example.github.io/posts/fe973f8e.html</id>
    <published>2021-06-30T07:47:45.000Z</published>
    <updated>2021-07-05T14:44:58.262Z</updated>
    
    <content type="html"><![CDATA[<p>自己这两天在对hexo博客进行相关主题配置中，发现网上的一些博客教程要么过了”保质期”,要么不够严谨。本来想避免踩坑的，结果被带到坑里面去了。为了避免以后再一头乱撞，先把最近伤脑筋的配置环节记录下来。</p><h2 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h2><p>当我想给自己的博客添加一张图片作为背景时，我看到网上大多数别人搭建博客的教程/笔记都是说让你去hexo\themes\主题名\source\css寻找一个_custom文件夹下面的styles.styl文件，然后添加修改文件，最后到主题的配置文件中找custom的相关配置，将/source/css_custom前面的注释去掉。我看到的大多数都是如此，刚开始的时候，我也是照着这样的方式来，但是很快我发现事情并非如此。</p><span id="more"></span><p>其实，这个next主题，GitHub上面有两个仓库</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/next.lxw6xs00akw.png" alt="next"></p><p>上面一个仓库现在已经停止维护了，下面一个仓库是目前在维护和发展的仓库，也是版本比较新的仓库。所以这就导致同样是next主题，但是在一些配置方面，新老版本的方法不一样，添加背景图片就是如此。如果你想从next V5迁移到next V7+,那么就参考这篇<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md">官方文档</a>，话不多说，下面开始操作。</p><p>首先，我们先去博客根目录下的source下新建一个_data文件夹以及一个styles.styl文件。接着将自己想要作为背景的图片放入themes/next/source/images里面，然后我们回到之前新建的styles.styl文件中，添加如下代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 添加背景图片</span><br><span class="line">body &#123;</span><br><span class="line">  background: url(/images/xxx.jpg);  //这里引入之前放在images中的图片名，也可以引入外链接</span><br><span class="line">  background-size: cover;</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-attachment: fixed;</span><br><span class="line">  background-position: 50% 50%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改主体透明度</span><br><span class="line">.main-inner &#123;</span><br><span class="line">  background: #fff;</span><br><span class="line">  opacity: 0.9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改菜单栏透明度</span><br><span class="line">.header-inner &#123;</span><br><span class="line">  opacity: 1.2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透明度可以根据自己的喜好进行修改。之后，我们在主题的配置文件中找到custom_file_path，将下面style前面的#去掉即可。这样，博客的背景图片就添加完成了。</p><h2 id="对代码和超链接进行凸显"><a href="#对代码和超链接进行凸显" class="headerlink" title="对代码和超链接进行凸显"></a>对代码和超链接进行凸显</h2><p>在代码块的配置中，我们可以在主题配置文件中找到codelock</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/codelock.1u0jjztu5gps.png" alt="codelock"></p><p>对其中的highlight_theme,style可以自行选择想要的样式。</p><p>对于代码行，我们可以通过添加css文件来进行高亮显示，我们可以在上面的styles.styl文件中添加以下代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">code &#123;</span><br><span class="line"><span class="code">    color: #ff7600;</span></span><br><span class="line"><span class="code">    background: #fbf7f8;</span></span><br><span class="line"><span class="code">    margin: 2px;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p>颜色可以根据自己的喜好来进行设置。而对于超链接，我们可以在themes\next\source\css\_common\components\post\post.styl中添加如下代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.post-body p a &#123;</span><br><span class="line">  color: #0593d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line"><span class="code">    color: #fc6423;</span></span><br><span class="line"><span class="code">    border-bottom: none;</span></span><br><span class="line"><span class="code">    border-bottom: 1px solid #fc6423;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p>颜色可以根据自己的喜好进行更改。通过这样的设置，我们文章中的超链接就会变得更加的显眼。</p><h2 id="配置Darkmode"><a href="#配置Darkmode" class="headerlink" title="配置Darkmode"></a>配置Darkmode</h2><p>在next主题的配置文件中，我们可以找到darkmode配置，将其改为true就可以启用darkmode(但是不能进行切换，而是根据系统偏好，是否是夜间模式来判断 是否启用)。但是我想实现的效果就是别人进入我的博客网站就是默认darkmode，并且有切换开关给访客自由切换。看到不少大佬的解决方案，但是大多数都让我觉得不太满意，最后我找到一个完美的解决方案。这位大佬在自己的博客中已经很详细的说明了每一步的操作，我就不赘述了。具体参考<a href="https://wdx.cool/2021/05/05/Hexo-Next8-x%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F/">大佬的博客</a>。我还是喜欢这个深色的模式，所以我没有给我的博客添加背景图片上去，但是上面的方法可行。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/darkmode.4n8lieq2unw0.png" alt="image"></p><h2 id="移除post-link"><a href="#移除post-link" class="headerlink" title="移除post_link"></a>移除post_link</h2><p>我之前在我的博客文章页作者署名下一行发现有一行post_link，指向的仓库的文章源文件，但是我并不想那么做。所以，我需要移除这个选项，可以进行如下操作：</p><p>在本地找到hemes\next\layout_partials\post\post-copyright.swig文件，将里面有关于post_link的&lt;li&gt;文件全部删除。这样，页面末尾就不会再出现post_link了。</p><h2 id="让红心跳动"><a href="#让红心跳动" class="headerlink" title="让红心跳动"></a>让红心跳动</h2><p>如果想要站底的红心跳动起来，我们只需要在主题配置文件中找到footer的icon，将其中的animated变为true即可。</p><h2 id="指定博客源文件的URL"><a href="#指定博客源文件的URL" class="headerlink" title="指定博客源文件的URL"></a>指定博客源文件的URL</h2><p>关于很多人出现过自己博客没有加载CSS文件的问题，其实根据报错基本都能够找到具体问题出在哪里。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/hexo%E6%A0%B7%E5%BC%8F.5ldq1x1vh080.jpg" alt="image"></p><p>但是对于博客的源文件地址没有指定正确的话，你是看不到任何的报错的，出现的效果就是上面这样。所以你在指定自己的博客源文件地址的时候一定要正确填写格式，要不然你可以选择不填写地址。</p><p><img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/url.60v4mg14sqg0.png" alt="image"></p><p>这个问题之前困扰了我很久，后来自己慢慢的才找到思路。</p><hr><h2 id="说在最后"><a href="#说在最后" class="headerlink" title="说在最后"></a>说在最后</h2><p>关于hexo的主题配置问题应该到这里就差不多告一段落了。自己其实看到有不少hexo布置的很漂亮，有些还添加了一个看板娘的，其实我开始的时候也想搞一个蕾姆模型的看板娘，但是考虑到资源加载，占用和博客访问速度问题，想想还是算了。对于我来说，博客资源的加载速度是优先级更高的，我自然就会舍弃那些动态背景和看板娘之类的，甚至连背景图片我也不想搞。这一切都只是锦上添花，没有加载速度，一切对于我来说没有意义。我觉得GitHub这个平台很不错，所以也没有自己购买域名的想法，况且我还没有对自己的博客进行SEO配置，也就没那个必要。</p><p>参考文章:</p><p>1.<a href="https://github.com/theme-next/hexo-theme-next/issues/973">how to change blog backgroud</a></p><p>2.<a href="https://wdx.cool/2021/05/05/Hexo-Next8-x%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F/">Hexo_Next8.x主题添加深色模式</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自己这两天在对hexo博客进行相关主题配置中，发现网上的一些博客教程要么过了”保质期”,要么不够严谨。本来想避免踩坑的，结果被带到坑里面去了。为了避免以后再一头乱撞，先把最近伤脑筋的配置环节记录下来。&lt;/p&gt;
&lt;h2 id=&quot;添加背景图片&quot;&gt;&lt;a href=&quot;#添加背景图片&quot; class=&quot;headerlink&quot; title=&quot;添加背景图片&quot;&gt;&lt;/a&gt;添加背景图片&lt;/h2&gt;&lt;p&gt;当我想给自己的博客添加一张图片作为背景时，我看到网上大多数别人搭建博客的教程/笔记都是说让你去hexo\themes\主题名\source\css寻找一个_custom文件夹下面的styles.styl文件，然后添加修改文件，最后到主题的配置文件中找custom的相关配置，将/source/css_custom前面的注释去掉。我看到的大多数都是如此，刚开始的时候，我也是照着这样的方式来，但是很快我发现事情并非如此。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://example.github.io/categories/Hexo/"/>
    
    
    <category term="主题" scheme="https://example.github.io/tags/%E4%B8%BB%E9%A2%98/"/>
    
    <category term="教程" scheme="https://example.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="文字博客" scheme="https://example.github.io/tags/%E6%96%87%E5%AD%97%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>免费激活Windows和office</title>
    <link href="https://example.github.io/posts/541ef572.html"/>
    <id>https://example.github.io/posts/541ef572.html</id>
    <published>2021-06-29T11:37:36.000Z</published>
    <updated>2021-07-06T07:04:36.229Z</updated>
    
    <content type="html"><![CDATA[<p>Windows系统和office办公软件都是我们现在学习，工作中很难离开的工具。由于各种各样的原因，可能有些人会出现Windows未被激活，office产品密钥过期等情况。所以，在这里列举一下如何免费的激活Windows和office。</p><h2 id="Windows激活"><a href="#Windows激活" class="headerlink" title="Windows激活"></a>Windows激活</h2><p>关于Windows的激活方式一般分为数字权利激活和KMS在线激活。</p><h4 id="1-数字权利激活"><a href="#1-数字权利激活" class="headerlink" title="1.数字权利激活"></a>1.数字权利激活</h4><p>数字权利激活会把当前电脑的硬件信息，上传至微软服务器。当用户重装系统后，设备会自动与服务器中存储的信息进行对比。如果相符，则自动激活。所以，这种激活方式对于用户来说是非常的方便的，有好的。</p><p>首先介绍一个专门用于激活Windows10的数字权利激活工具——云萌激活</p><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><p>以数字权利激活Windows10系统（涵盖各个版本）</p><span id="more"></span><p><font color='00dd00'>云萌激活</font>：</p><p><a href="https://cmwtat.cloudmoe.com/cn.html">云萌Windows 10激活工具 - 首页 </a></p><p><a href="https://github.com/TGSAN/CMWTAT_Digital_Edition">GitHub开源地址</a></p><p>这是一款开源免费的数字权利激活工具，你可以使用他免费激活windows10系统。只需要简单的几步操作就可以完成。</p><h5 id="激活步骤"><a href="#激活步骤" class="headerlink" title="激活步骤"></a>激活步骤</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">中文版</span><br><span class="line">下载 Releases 里的 .exe 发行文件。</span><br><span class="line"></span><br><span class="line">运行它。</span><br><span class="line"></span><br><span class="line">点按 Activate 按钮。</span><br><span class="line"></span><br><span class="line">完成~</span><br></pre></td></tr></table></figure><p>可以说是十分的简单易用。</p><h4 id="2-KMS服务器激活"><a href="#2-KMS服务器激活" class="headerlink" title="2.KMS服务器激活"></a>2.KMS服务器激活</h4><p>密钥管理服务（KMS）是微软为批量许可客户（组织，学校或政府）提供的一种正版激活方法。KMS激活期限最多可以长达180天（6个月），激活每7天自动进行更新（期限自动重置为180天），也就是说如果客户端可以一直连接到KMS主机服务器，那么是可以无限制的使用下去。</p><p>但是对于一些非Windows10系统的用户来说，上面的工具爱莫能助，所以我们需要一款更加强大的激活工具——HEU KMS Activator </p><p><a href="https://github.com/zbezj/HEU_KMS_Activator">GitHub发布地址</a></p><h5 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h5><p>支持KMS激活Microsoft Windows、Office； 2、支持数字许可永久激活、KMS38激活至2038年；  3、支持OEM激活Windows Vista, Windows 7, Windwos Server； 4、支持Microsoft Office  零售版转换为VL批量许可版； 5、支持备份和还原激活信息。 6、支持自定义搭建KMS服务器激活； —激活成功率高、执行速度快、支持几乎所有版本； —在Windows 7上无需依赖安装.NET Framework； —可以自行安装或搭建KMS服务器； —自动识别三种语言（简/繁/英）；  —带参数可静默运行且参数可根据需要自选； —可以一键自动激活、也可以根据需要自选； —包含KMS相关的功能（安装密钥、激活状态查询等）  —完全可离线激活，也可以连接网络服务器进行激活；</p><p>正因为这款激活工具几乎可以解决Windows电脑上所有的激活服务，所以在GitHub上也只是以文件的形式上传，并没有将工具代码开源，个人自行选择是否使用。</p><h5 id="激活步骤-1"><a href="#激活步骤-1" class="headerlink" title="激活步骤"></a>激活步骤</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.打开HEU KMS Activator 并选择一个激活方式(下面以数字激活为例)</span><br><span class="line">2.点击数字激活，点击“橘黄色按钮”，将激活 Windows 和 Office，智能识别最佳 的激活方式（优先顺序依次为数字许可证/KMS38/OEM/KMS），并自动跳过已经 永久激活的版本。</span><br><span class="line">3.完成(更多的激活方式自行选择和查询)</span><br></pre></td></tr></table></figure><h4 id="3-产品密钥激活"><a href="#3-产品密钥激活" class="headerlink" title="3.产品密钥激活"></a>3.产品密钥激活</h4><p>其实产品密钥激活算不上是另一种激活形式，只是换了一种激活方式。根据密钥的性质（数字权利还是KMS激活密钥）来决定你的设备激活状态。</p><p>如果你能确定自己的密钥是数字权利密钥，那么你可以直接打开设置-更新和安全-激活-更换产品密钥。将你手里面的密钥输入进入激活即可。</p><p>但是如果你是KMS密钥的话建议通过代码来进行激活，代码如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX(这里输入你自己的产品密钥)</span><br><span class="line">slmgr /skms kms.03k.org</span><br><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure><p>这样用代码激活的好处就是，当激活使用时间达到180天后，他会自动帮你激活，这样你就不需要再通过手动激活了。</p><p>密钥获取处:<a href="https://t.me/getkeys">Windows与office激活密钥公益发布站</a></p><p>本着互联网“传递，共享，自由”的原则，我希望大家使用公益站发布的密钥之后，能给他一个关注。</p><hr><h2 id="office产品激活"><a href="#office产品激活" class="headerlink" title="office产品激活"></a>office产品激活</h2><p>office激活除了上面说到的HEU KMS Activator ，但是可能由于代码没有开源的缘故，可能让人觉得不太放心，那么下面的office tool plus也是一个不错的选择。</p><p><a href="https://otp.landian.vip/zh-cn/">Office Tool Plus 官方网站 - 一键部署 Office </a></p><p><a href="https://github.com/YerongAI/Office-Tool">GitHub开源地址</a></p><h5 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h5><p>一键生成配置，快速激活office,Office Tool Plus从微软服务器上获取office的版本信息以及安装文件，始终确保下载，安装的office为最新版本。</p><h5 id="激活步骤-2"><a href="#激活步骤-2" class="headerlink" title="激活步骤"></a>激活步骤</h5><p>下载Office Tool Plus之后，激活步骤请参考<a href="https://help.coolhub.top/zh-cn/activate/#%E6%BF%80%E6%B4%BB%E6%AD%A5%E9%AA%A4">官方文档</a>，有详细说明。</p><hr><h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><p>也许你实在不想折腾那么多繁琐的步骤，那么你可以使用产品密钥激活(密钥寻找可以前往上面的telegram频道，如果你没有telegram，那就只能求助于万能的网友了)，或者暂时使用office的替代品。我这里推荐两个替代品：一个是<a href="https://www.wps.com/download/">WPS</a>,另一个是<a href="https://www.libreoffice.org/">Libre Office</a>(开源免费，与Office兼容)。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1.<a href="https://zhuanlan.zhihu.com/p/349931246">Windows系统激活神器HEU KMS Activator v22.1.0激活工具</a></p><p>2.<a href="https://zhuanlan.zhihu.com/p/260014354">win10激活的几种方式及其原理</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Windows系统和office办公软件都是我们现在学习，工作中很难离开的工具。由于各种各样的原因，可能有些人会出现Windows未被激活，office产品密钥过期等情况。所以，在这里列举一下如何免费的激活Windows和office。&lt;/p&gt;
&lt;h2 id=&quot;Windows激活&quot;&gt;&lt;a href=&quot;#Windows激活&quot; class=&quot;headerlink&quot; title=&quot;Windows激活&quot;&gt;&lt;/a&gt;Windows激活&lt;/h2&gt;&lt;p&gt;关于Windows的激活方式一般分为数字权利激活和KMS在线激活。&lt;/p&gt;
&lt;h4 id=&quot;1-数字权利激活&quot;&gt;&lt;a href=&quot;#1-数字权利激活&quot; class=&quot;headerlink&quot; title=&quot;1.数字权利激活&quot;&gt;&lt;/a&gt;1.数字权利激活&lt;/h4&gt;&lt;p&gt;数字权利激活会把当前电脑的硬件信息，上传至微软服务器。当用户重装系统后，设备会自动与服务器中存储的信息进行对比。如果相符，则自动激活。所以，这种激活方式对于用户来说是非常的方便的，有好的。&lt;/p&gt;
&lt;p&gt;首先介绍一个专门用于激活Windows10的数字权利激活工具——云萌激活&lt;/p&gt;
&lt;h5 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h5&gt;&lt;p&gt;以数字权利激活Windows10系统（涵盖各个版本）&lt;/p&gt;</summary>
    
    
    
    <category term="文字博客" scheme="https://example.github.io/categories/%E6%96%87%E5%AD%97%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="教程" scheme="https://example.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Windows" scheme="https://example.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客相关配置（2）</title>
    <link href="https://example.github.io/posts/e863b3d6.html"/>
    <id>https://example.github.io/posts/e863b3d6.html</id>
    <published>2021-06-29T01:43:42.000Z</published>
    <updated>2021-07-05T14:44:58.263Z</updated>
    
    <content type="html"><![CDATA[<p>hexo博客主题配置过程中不仅有不少的踩坑问题，还比较的琐碎，需要不少的耐心。</p><h3 id="1-主题的标签，分类，关于页面的生成"><a href="#1-主题的标签，分类，关于页面的生成" class="headerlink" title="1.主题的标签，分类，关于页面的生成"></a>1.主题的标签，分类，关于页面的生成</h3><p>其实这一部分在next主题配置中还算简单的，也没有什么坑，主要是说说如何生成这些页面以及修改相关内容。</p><ul><li><p>标签页</p><p>想要生成标签页，我们首先需要在博客的根目录（例如我将整个博客放在D:\BigDataTools\hexo下，那么hexo文件下就是我的博客根目录）在当下目录输入</p><p><code>hexo new page tags</code></p><p>之后就会在hexo/source下生成相对应的文件夹和index文件，我们对其进行修改：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: all tags</span><br><span class="line">date: xxxx-xx-xx</span><br><span class="line">type: tags</span><br></pre></td></tr></table></figure></li><li><p>分类页</p><p>同样，我们在博客的根目录下输入</p><p><code>hexo new page  categories</code></p><span id="more"></span><p>对index文件进行如下修改：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: all categories</span><br><span class="line">date:  xxxx-xx-xx</span><br><span class="line">type: categories</span><br></pre></td></tr></table></figure></li><li><p>关于页</p><p>在博客的根目录下输入</p><p><code>hexo new page about</code></p><p>对其中的index文件进行如下编辑：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 关于</span><br><span class="line">date:</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">正文内容</span><br></pre></td></tr></table></figure></li></ul><p>然后找到主题的配置文件（hexo/themes/主题名/_config.yml)中的menu，将tags,categories,about对应前面的注释去掉即可。我们可以顺便将主题配置文件中tags_icon设置为true,这样你的博客标签将会以图标的方式展现出来而不再是#。</p><h3 id="2-添加社交方式"><a href="#2-添加社交方式" class="headerlink" title="2.添加社交方式"></a>2.添加社交方式</h3><p>其实主题中会内置一些社交的方式，我们只需要在主题配置文件中打开就可以（我以next主题为例）。我们首先来到主题配置文件中，找到social<img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/social.501i9rss0r40.png" alt="image"></p><p>将我们需要的打开，把后面的联系地址填上去就可以了。当然，也许这上面提供的联系方式不能满足你的要求，那么你可以自定义添加自己想要的联系方式。在这个<a href="https://fontawesome.com/v5.15/icons?d=gallery&p=2">图标网站</a>上你不需要复制链接，也不需要下载图标，你只需要在这个网站上找到对应联系方式的图标，确认没有错误就可以。然后我们回到配置文件中，添加自定义的联系方式（需要注意书写的格式）。网站只是帮助你确认联系方式的图标。</p><h3 id="3-博客文章置顶"><a href="#3-博客文章置顶" class="headerlink" title="3.博客文章置顶"></a>3.博客文章置顶</h3><p>比如说我想让进入这个网站的朋友最先看到的就是如何搭建hexo博客的文章，那么文章置顶对于我来说就很有必要的了。我们需要进行如下操作</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save(卸载原来的插件)</span><br><span class="line">npm install hexo-generator-index-pin-top --save(安装置顶插件)</span><br></pre></td></tr></table></figure><p>设置置顶标志：</p><p>进入/theme/主题名/layout/_macro/post.swig，找到</p><p><code>&lt;div class = &#39;post-meta&#39;&gt;</code>下面插入代码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line"><span class="code">    &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="code">    &lt;font color=&quot;RED&quot;&gt;置顶&lt;/font&gt; (置顶文字的颜色可以自行修改)</span></span><br><span class="line"><span class="code">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span></span><br><span class="line"><span class="code">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><p>之后，我们只需要在编写一篇新的博客的时候在元数据中加入<code>top: true</code>就可以了。</p><p>PS：参考博客：<a href="https://juejin.cn/post/6844904037465194503">hexo next主题设置文章置顶</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;hexo博客主题配置过程中不仅有不少的踩坑问题，还比较的琐碎，需要不少的耐心。&lt;/p&gt;
&lt;h3 id=&quot;1-主题的标签，分类，关于页面的生成&quot;&gt;&lt;a href=&quot;#1-主题的标签，分类，关于页面的生成&quot; class=&quot;headerlink&quot; title=&quot;1.主题的标签，分类，关于页面的生成&quot;&gt;&lt;/a&gt;1.主题的标签，分类，关于页面的生成&lt;/h3&gt;&lt;p&gt;其实这一部分在next主题配置中还算简单的，也没有什么坑，主要是说说如何生成这些页面以及修改相关内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;标签页&lt;/p&gt;
&lt;p&gt;想要生成标签页，我们首先需要在博客的根目录（例如我将整个博客放在D:\BigDataTools\hexo下，那么hexo文件下就是我的博客根目录）在当下目录输入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo new page tags&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后就会在hexo/source下生成相对应的文件夹和index文件，我们对其进行修改：&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;title: all tags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: xxxx-xx-xx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type: tags&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分类页&lt;/p&gt;
&lt;p&gt;同样，我们在博客的根目录下输入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo new page  categories&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://example.github.io/categories/Hexo/"/>
    
    
    <category term="主题" scheme="https://example.github.io/tags/%E4%B8%BB%E9%A2%98/"/>
    
    <category term="教程" scheme="https://example.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="文字博客" scheme="https://example.github.io/tags/%E6%96%87%E5%AD%97%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客相关配置（1）</title>
    <link href="https://example.github.io/posts/fad61c38.html"/>
    <id>https://example.github.io/posts/fad61c38.html</id>
    <published>2021-06-26T05:08:42.000Z</published>
    <updated>2021-07-05T14:44:58.258Z</updated>
    
    <content type="html"><![CDATA[<p>今天在对hexo进行主题美化配置的过程中我发现了不少的问题。所以特地在这里列举一下问题以及相关的注意事项。可能一次性很难说完说全，因为我自己也是刚使用hexo博客不久（之前自己投入的是hugo的怀抱），所以有关于hexo博客的配置和注意事项我应该会写一个系列。而且我怕一篇文章太长，没有耐心看下去，所以还是选择少量多次的好。</p><h3 id="1-hexo-symbols-count-time下载报错"><a href="#1-hexo-symbols-count-time下载报错" class="headerlink" title="1.hexo-symbols-count-time下载报错"></a>1.hexo-symbols-count-time下载报错</h3><p>今天我想给自己的hexo博客上添加字数统计和阅读时间估计（我看到许多的hexo博客都使用了这个插件，而且自己也觉得很不错）。但是当我在终端输入</p><p><code>npm install hexo-symbols-count-time --save</code></p><p>时（npm下载慢的朋友可以使用cnpm），我发现我当前版本的一些js文件版本过低，我需要更新版本。<img src="https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1.3lz4gml615w0.png" alt="image"></p><p>看到有人在issues中提交了和我一样问题的截图，有人给出的解答是先更新npm和node.js，于是我决定先将npm和node.js更新一下。输入以下代码：</p><span id="more"></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">首先查看当前版本</span><br><span class="line">node -v</span><br><span class="line">node -v </span><br><span class="line">然后更新版本</span><br><span class="line">npm install -g npm</span><br><span class="line">注意：接下来的操作仅适合Mac和Linux用户</span><br><span class="line">npm cache clean -f # 清除缓存</span><br><span class="line">npm install -g n # 安装n模块，Windows系统目前无法使用n模块，所以无法完成后面的操作</span><br><span class="line">n stable # 升级node.js到最新稳定版本,r如果出现升级错误，在命令前面加上sudo</span><br></pre></td></tr></table></figure><p>所以现在有一个问题，那么Windows用户该如何更新node.js呢。呃，这个嘛，可能需要重新安装一遍到原来的路径（<del>我也表示很无奈</del>)。当你完成两个地方的更新之后，你再去下载hexo-symbols-count-time这个插件。</p><h3 id="2-配置插件"><a href="#2-配置插件" class="headerlink" title="2.配置插件"></a>2.配置插件</h3><p>这个配置插件也是有知识点滴。首先我们需要在站点配置上（也就是博客根目录下的_config.yml文件）添加配置内容，内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># count<span class="emphasis">_time (名字随意)</span></span></span><br><span class="line"><span class="emphasis"><span class="section">  symbols_</span>count<span class="emphasis">_time:</span></span></span><br><span class="line"><span class="emphasis"><span class="section"> #文章内是否显示</span></span></span><br><span class="line"><span class="emphasis"><span class="section">  symbols: true # 文章字数</span></span></span><br><span class="line"><span class="emphasis"><span class="section">  time: true  # 阅读时长</span></span></span><br><span class="line"><span class="emphasis"><span class="section"> # 网页底部是否显示</span></span></span><br><span class="line"><span class="emphasis"><span class="section">  total_</span>symbols: false # 所有文章总字数</span></span><br><span class="line">  total<span class="emphasis">_time: false  # 所有文章总时长</span></span><br><span class="line"><span class="emphasis">  exclude_</span>codeblock: false # 代码框内不计入字数</span><br></pre></td></tr></table></figure><p>然后我们还需要在主题配置文件下进行修改（就是指themes-next-_config.yml文件），内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">symbols<span class="emphasis">_count_</span>time:</span><br><span class="line">  separated<span class="emphasis">_meta: true # 换行显示</span></span><br><span class="line"><span class="emphasis">  item_</span>text<span class="emphasis">_post: true # 是否显示说明文字</span></span><br><span class="line"><span class="emphasis">  item_</span>text<span class="emphasis">_total: false # 站底总字数统计，不显示</span></span><br><span class="line"><span class="emphasis">  awl: 5  # Average Word Length，也就是平均每个字所占字符长度，默认值为 4(中文占2个，英文单词占5个)</span></span><br><span class="line"><span class="emphasis">  wpm: 275  # Words Per Minute，也就是平均每分钟能读多少字，默认值为 275</span></span><br></pre></td></tr></table></figure><p>如果你发现你的字数统计和时间估计显示的是Na这样的样式，说明你的awl配置有问题，需要进行修改。特别注意，如果你的默认hello-world.md文件没有删除的话，可能就会影响你的站底字数统计。</p><h3 id="3-头像设置"><a href="#3-头像设置" class="headerlink" title="3.头像设置"></a>3.头像设置</h3><p>最后先说一个网站的头像设置问题，如果你想设置一个自己的头像的话，你只需要进行简单的设置就可以了。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Sidebar Avatar</span></span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: /images/xxx.jpg</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true # 表示头像采用圆形框，默认为方形（false)。</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: true # 头像会随着鼠标的移动而旋转</span><br></pre></td></tr></table></figure><p>顺便说一下，如果你想实现和我一样的文章内容只显示摘要而不显示全文的话，你只需要在自己Markdown工具上合适位置输入&lt;!—-more—-&gt;就可以了（这几个字符之间是没有任何的空格的）。</p><p>PS：参考博客：<a href="https://zhuanlan.zhihu.com/p/75055816">Next网站配置——功能增添</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在对hexo进行主题美化配置的过程中我发现了不少的问题。所以特地在这里列举一下问题以及相关的注意事项。可能一次性很难说完说全，因为我自己也是刚使用hexo博客不久（之前自己投入的是hugo的怀抱），所以有关于hexo博客的配置和注意事项我应该会写一个系列。而且我怕一篇文章太长，没有耐心看下去，所以还是选择少量多次的好。&lt;/p&gt;
&lt;h3 id=&quot;1-hexo-symbols-count-time下载报错&quot;&gt;&lt;a href=&quot;#1-hexo-symbols-count-time下载报错&quot; class=&quot;headerlink&quot; title=&quot;1.hexo-symbols-count-time下载报错&quot;&gt;&lt;/a&gt;1.hexo-symbols-count-time下载报错&lt;/h3&gt;&lt;p&gt;今天我想给自己的hexo博客上添加字数统计和阅读时间估计（我看到许多的hexo博客都使用了这个插件，而且自己也觉得很不错）。但是当我在终端输入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install hexo-symbols-count-time --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;时（npm下载慢的朋友可以使用cnpm），我发现我当前版本的一些js文件版本过低，我需要更新版本。&lt;img src=&quot;https://cdn.jsdelivr.net/gh/ilemonEllen/image_github@master/blog_image/%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1.3lz4gml615w0.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;看到有人在issues中提交了和我一样问题的截图，有人给出的解答是先更新npm和node.js，于是我决定先将npm和node.js更新一下。输入以下代码：&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://example.github.io/categories/Hexo/"/>
    
    
    <category term="主题" scheme="https://example.github.io/tags/%E4%B8%BB%E9%A2%98/"/>
    
    <category term="教程" scheme="https://example.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="文字博客" scheme="https://example.github.io/tags/%E6%96%87%E5%AD%97%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>如何快速搭建一个hexo博客</title>
    <link href="https://example.github.io/posts/4223bff5.html"/>
    <id>https://example.github.io/posts/4223bff5.html</id>
    <published>2021-06-24T02:08:18.000Z</published>
    <updated>2021-07-06T07:01:37.168Z</updated>
    
    <content type="html"><![CDATA[<p>hexo博客是一个Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。我将在这里说说自己是如何搭建hexo博客的。</p><h2 id="安装node-js和Git"><a href="#安装node-js和Git" class="headerlink" title="安装node.js和Git"></a>安装node.js和Git</h2><p>首先第一步，你需要首先下载<a href="https://nodejs.org/en/">Node.js</a>（安装的时候记得勾选add to path)和<a href="https://git-scm.com/">Git</a>,这两个是你搭建hexo博客必备的东西（Hexo是一款基于Node.js的静态博客框架），所以Node.js就是根本中的根本。当然，Git主要是为了完成博客的部署，提交问题而准备的。其实你可以下载一个已经集成了git bash的<a href="https://cmder.net/">cmder</a>,建议下载full版本的。之后可以在cmder上面进行博客的搭建，部署。接下来的命令将在cmder中进行，如果使用git bash的话，命令也是一样的。</p><p>完成安装之后，我们打开cmder分别输入</p><span id="more"></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v </span><br><span class="line">git --version(直接使用的cmder就省略这一步)</span><br></pre></td></tr></table></figure><p>如果看到有版本号输出的话，那就代表安装成功且环境变量没有问题。如果没有，那就建议看看是不是安装的时候忘记勾选add to path，建议查看node.js的环境变量（卸载重新安装node.js也可以）。</p><p>当你完成这些工具的下载，检查之后，你接着需要去<a href="https://github.com/">GitHub</a>注册一个账号，接下来我以hexo+github pages的部署为例。账号注册过程很简单，这里就不赘述了，不会的话建议自行百度或者Google。</p><p>注：其实上面这些工具完全可以不放入系统盘，就算放在其他硬盘，下载依赖的时候，依赖还是会默认下载到系统盘的。这是没什么影响的。我现在的博客就是这么操作的。</p><hr><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>下面开始正式的安装：</p><p>1.安装cnpm(国内由于众所周知的原因npm下载插件，依赖的时候比较慢，所以采用cnpm下载)</p><p>在cmder中输入</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>检查：cnpm是否安装成功 <code>cnpm -v</code>  如果输出版本号就是成功了</p><p>2.安装hexo</p><p>在cmder中输入 </p><p><code>cnpm install hexo-cli -g</code></p><p>完成之后，在你电脑上选择一个位置新建一个文件夹用来保存hexo文件。例如我就是：D:\BigDataTools\hexo</p><p>现在使用cmder  cd 到你刚才新建的文件夹下面，然后执行</p><p><code>hexo init</code> </p><p>到<code>Install dependencies</code></p><p>的时候你可能会卡住，这是大多数人基本都会遇到的，我们只需要在这里的时候结束命令，按<code>Ctrl + c</code>就可以结束命令（我在安装的过程中并没有遇到，如果你遇到了，那么请执行上述操作）。</p><p>下一步执行<code>cnpm install</code> 完成初始化工作，等待完成结束之后，接下来输入<code>hexo s</code>在本地预览。按住ctrl单击<code>http://localhost:4000</code>就可以在本地实现预览效果了。</p><h2 id="配置hexo博客"><a href="#配置hexo博客" class="headerlink" title="配置hexo博客"></a>配置hexo博客</h2><h4 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1.更换主题"></a>1.更换主题</h4><p>你可能觉得那个主题并不好看，所以现在我们去挑选一个自己喜欢的主题吧——<a href="https://hexo.io/themes/">hexo主题</a>，所有的主题都在这里了。在上面挑选一个自己喜欢的就好，<strong>不同的主题之间配置不尽相同，略有差异</strong>。下面我以<a href="https://github.com/theme-next/hexo-theme-next">next</a>主题为例,主题的下载你可以直接克隆，也可以下载压缩包解压出来。我这里就直接克隆了。直接在cmder中输入</p><p><code>git clone https://github.com/theme-next/hexo-theme-next.git themes/next</code> </p><p>简单解释一下：前面的git clone就是克隆命令 中间一段是主题的地址 后面是将其命名为next。</p><h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h4><p>在博客的根目录下找到__config.yml文件，vi进去找到theme那一行，将原来的主题替换为next。然后执行<code>hexo s</code>在本地预览效果。默认是白色的背景，如果想要使用黑色的背景就在<strong>themes-next-_config.yml</strong>中找到darkmode，将false改为true即可，但是这里有一点我必须说明一下，next主题下的Darkmode会根据设备来自行决定是light还是dark，意思就是如果你的手机是深色模式，电脑是浅色模式，那么你在手机上看到的博客样式就是深色的，而在电脑上看到的就会是浅色的。（注意,博客根目录下的配置文件和主题下面的配置文件都是一样的名字_config.yml，千万不要混淆）</p><h4 id="3-设置语言"><a href="#3-设置语言" class="headerlink" title="3.设置语言"></a>3.设置语言</h4><p>博客页面默认是英文的，我们现在使用的是next主题（不同的主题之间可能有所不一样，前面我已经提到过了，若有差异则以你所使用的主题官方文档为准）我们需要进入根目录下的_config.yml，找到language,然后将其改为zh-CN。</p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><h4 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1.新建仓库"></a>1.新建仓库</h4><p>进入我们之前已经创建好账号的GitHub，在左侧新建一个仓库，仓库的命名格式为：你的用户名+github.io。例如我的GitHub用户名是Aegisprogram，那么对应的我的仓库名字就是Aegisprogram.github.io。添加仓库描述，勾选public，勾选add README，然后点击创建。</p><h4 id="2-接下来创建密钥"><a href="#2-接下来创建密钥" class="headerlink" title="2.接下来创建密钥"></a>2.接下来创建密钥</h4><p>打开cmder 输入<code>ssh-keygen -t rsa -C “your_email@youremail.com“</code>,然后接连按回车键，等到命令执行结束后我们输入<code>cat ~/.ssh/id_rsa.pub</code>,我们能看到一大串字母。我们把上面一大串密钥复制下，进入GitHub-点击头像-setting-SSH-New SSH Key，把之前复制的一大串字母添加进去。回到cmder，输入<code> ssh -T git@github.com</code>,接下来你会看到<code>Are you sure you want to continue connecting (yes/no/[fingerprint])? </code>,如果还有别的内容，那也就yes。现在去GitHub自己仓库上面点击code,切换到ssh然后将那一段地址复制下来。</p><h4 id="3-修改站点配置文件"><a href="#3-修改站点配置文件" class="headerlink" title="3.修改站点配置文件"></a>3.修改站点配置文件</h4><p>我们用cmder打开博客根目录下的_config.yml文件，找到deploy所在地方，修改添加信息。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"><span class="code">type: git</span></span><br><span class="line"><span class="code">repo: git@github.com:username/username.github.io.git</span></span><br><span class="line"><span class="code">branch: main(我们新建仓库的时候就是main，所以这里直接采用main分支)</span></span><br></pre></td></tr></table></figure><p>接着在博客根目录下执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#x27;yourname&#x27;(github用户名)</span><br><span class="line">git config --global user.email &#x27;youremail&#x27;(注册github所用的邮箱)</span><br></pre></td></tr></table></figure><p>之后上传插件：cnpm install hexo-deployer-git –save</p><p>最后我们在博客根目录下执行hexo g -d就可以完成上传了。我们可以去自己的仓库看看文件是否上传成功，接着访问我们的网址就好了。</p><p>至此，hexo博客就搭建部署完成了。但是我想你已经迫不及待地想要开始写一篇自己地文章提交上去了吧。我们需要掌握一些博客的命令：</p><ul><li>新建博客<code>hexo new &#39;title&#39;</code>(hexo会直接在D:\BigDataTools\hexo\source_posts下生成.md文件)</li><li>新建博客页<code>hexo new page +name</code></li><li>清理缓存<code>hexo clean</code></li><li>本地预览<code>hexo s</code></li><li>提交博客<code>hexo g -d </code></li></ul><p>当然，这些都是十分简单的但是却很需要的命令，除此之外，使用静态博客你还需要对Markdown写作语法熟练，这是基本要求，顺带了解一下GitHub网站，最好能掌握一些HTML，CSS和JavaScript，当然如果你注重内容输出本身的话，那么掌握Markdown语法基本够用。</p><p>对于写作工具的话，我推荐使用<a href="https://typora.io/">Typora</a>，轻量写作神器，所见即所得。</p><p>hexo博客还有很多的内容需要自己去探索，在这里不可能一一讲解，不过，着重了解hexo的博客框架各部分的作用还是很有必要的。</p><p>PS：参考博客：<a href="https://www.cnblogs.com/huanhao/p/hexobase.html">基础篇——hexo博客搭建教程</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;hexo博客是一个Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。我将在这里说说自己是如何搭建hexo博客的。&lt;/p&gt;
&lt;h2 id=&quot;安装node-js和Git&quot;&gt;&lt;a href=&quot;#安装node-js和Git&quot; class=&quot;headerlink&quot; title=&quot;安装node.js和Git&quot;&gt;&lt;/a&gt;安装node.js和Git&lt;/h2&gt;&lt;p&gt;首先第一步，你需要首先下载&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;（安装的时候记得勾选add to path)和&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;,这两个是你搭建hexo博客必备的东西（Hexo是一款基于Node.js的静态博客框架），所以Node.js就是根本中的根本。当然，Git主要是为了完成博客的部署，提交问题而准备的。其实你可以下载一个已经集成了git bash的&lt;a href=&quot;https://cmder.net/&quot;&gt;cmder&lt;/a&gt;,建议下载full版本的。之后可以在cmder上面进行博客的搭建，部署。接下来的命令将在cmder中进行，如果使用git bash的话，命令也是一样的。&lt;/p&gt;
&lt;p&gt;完成安装之后，我们打开cmder分别输入&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://example.github.io/categories/Hexo/"/>
    
    
    <category term="教程" scheme="https://example.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="文字博客" scheme="https://example.github.io/tags/%E6%96%87%E5%AD%97%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
